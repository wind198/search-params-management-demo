import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { RootLayoutClientWrapper } from "@/components/singleton/RootLayoutClientWrapper";
import { Navigation } from "@/components/common/Navigation";
import { Suspense } from "react";
import { SWRConfig } from "swr";
import {
  getUsersData,
  getProductsData,
  getUsersSWRKey,
  getProductsSWRKey,
} from "@/lib/data";
import { getFullSearchParamsFromUrlForSsr } from "@/helpers/getFullSearchParamsFromUrlForSsr";
import { headers } from "next/headers";
import { extractPathnameFromFullUrl } from "@/helpers/extractPathnameFromFullUrl";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Get the current URL and search params to build the exact SWR keys
  const headersList = await headers();
  const url = headersList.get("x-url") as string;
  const pathname = extractPathnameFromFullUrl(url);

  const fullSearchParams = getFullSearchParamsFromUrlForSsr(url);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const fallback = {} as Record<string, any>;
  if (pathname === "/users") {
    fallback[getUsersSWRKey(fullSearchParams)] = getUsersData(fullSearchParams);
  }
  if (pathname === "/products") {
    fallback[getProductsSWRKey(fullSearchParams)] =
      getProductsData(fullSearchParams);
  }

  console.log("fallback keys", Object.keys(fallback));

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <SWRConfig
          value={{
            // fallback keys must match the url client side use to fetch data
            fallback,
          }}
        >
          <Navigation />
          <Suspense>
            <RootLayoutClientWrapper>{children}</RootLayoutClientWrapper>
          </Suspense>
        </SWRConfig>
      </body>
    </html>
  );
}
